from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
import matplotlib.pyplot as plt
import pandas as pd

try:
    df = pd.read_csv('bank-full.csv', sep=';')
except FileNotFoundError:
    df = pd.read_csv('bank.csv', sep=';')

print("Loaded DataFrame with columns:")
print(df.columns)

print("First few rows of the dataset:")
print(df.head())

target_column = 'y'

if target_column not in df.columns:
    print(f"Error: '{target_column}' column not found in the dataset.")
    print(f"Available columns are: {df.columns.tolist()}")
else:
    X = df.drop(target_column, axis=1)
    y = df[target_column]  # Fixed: Added closing bracket here

    categorical_cols = [col for col in X.columns if X[col].dtype == 'object']
    numerical_cols = [col for col in X.columns if X[col].dtype != 'object']

    numerical_transformer = Pipeline(steps=[
        ('imputer', SimpleImputer(strategy='median'))
    ])

    categorical_transformer = Pipeline(steps=[
        ('onehot', OneHotEncoder(handle_unknown='ignore'))
    ])

    preprocessor = ColumnTransformer(
        transformers=[
            ('num', numerical_transformer, numerical_cols),
            ('cat', categorical_transformer, categorical_cols)
        ])

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    model = Pipeline(steps=[('preprocessor', preprocessor),
                        ('classifier', DecisionTreeClassifier(random_state=42, max_depth=5))])  # Changed max_depth to 5 to ensure tree visualization works

    model.fit(X_train, y_train)

    y_pred = model.predict(X_test)

    print("Accuracy:", accuracy_score(y_test, y_pred))
    print("\nClassification Report:\n", classification_report(y_test, y_pred))
    print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))

    # Ensure the tree is visualized by setting a reasonable max_depth
    plt.figure(figsize=(20, 10))
    plot_tree(model.named_steps['classifier'],
              feature_names=model.named_steps['preprocessor'].get_feature_names_out(),
              class_names=y.unique(),
              filled=True)
    plt.show()